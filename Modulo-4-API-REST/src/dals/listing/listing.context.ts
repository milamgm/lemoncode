import { Schema, model } from 'mongoose';
import { Listing } from './listing.model.js';

const listingSchema = new Schema({
  _id: Schema.Types.ObjectId,
  listing_url: { type: Schema.Types.String, required: true },
  name: { type: Schema.Types.String, required: true },
  summary: { type: Schema.Types.String, required: true },
  space: Schema.Types.String,
  description: { type: Schema.Types.String, required: true },
  neighborhood_overview: Schema.Types.String,
  notes: Schema.Types.String,
  transit: Schema.Types.String,
  access: Schema.Types.String,
  interaction: Schema.Types.String,
  house_rules: { type: Schema.Types.String, required: true },
  property_type: { type: Schema.Types.String, required: true },
  room_type: { type: Schema.Types.String, required: true },
  bed_type: { type: Schema.Types.String, required: true },
  minimum_nights: { type: Schema.Types.Number, required: true },
  maximum_nights: { type: Schema.Types.Number, required: true },
  cancellation_policy: { type: Schema.Types.String, required: true },
  last_scraped: Schema.Types.Date,
  calendar_last_scraped: Schema.Types.Date,
  first_review: Schema.Types.Date,
  last_review: Schema.Types.Date,
  accommodates: { type: Schema.Types.Number, required: true },
  bedrooms: { type: Schema.Types.Number, required: true },
  beds: { type: Schema.Types.Number, required: true },
  bathrooms: { type: Schema.Types.Number, required: true },
  amenities: { type: [Schema.Types.String], required: true },
  price: { type: Schema.Types.Number, required: true },
  security_deposit: { type: Schema.Types.Number, required: true },
  cleaning_fee: { type: Schema.Types.Number, required: true },
  extra_people: { type: Schema.Types.Number, required: true },
  guests_included: { type: Schema.Types.Number, required: true },
  images: {
    thumbnail_url: Schema.Types.String,
    medium_url: Schema.Types.String,
    picture_url: { type: Schema.Types.String, required: true },
    xl_picture_url: Schema.Types.String,
  },
  host: {
    host_id: { type: Schema.Types.String, required: true },
    host_url: Schema.Types.String,
    host_name: { type: Schema.Types.String, required: true },
    host_location: Schema.Types.String,
    host_about: Schema.Types.String,
    host_response_time: Schema.Types.String,
    host_thumbnail_url: Schema.Types.String,
    host_picture_url: Schema.Types.String,
    host_neighbourhood: Schema.Types.String,
    host_response_rate: { type: Schema.Types.Number, required: true },
    host_is_superhost: { type: Schema.Types.Boolean, required: true },
    host_has_profile_pic: { type: Schema.Types.Boolean, required: true },
    host_identity_verified: { type: Schema.Types.Boolean, required: true },
    host_listings_count: { type: Schema.Types.Number, required: true },
    host_total_listings_count: { type: Schema.Types.Number, required: true },
    host_verifications: { type: [Schema.Types.String], required: true },
  },
  address: {
    street: { type: Schema.Types.String, required: true },
    suburb: Schema.Types.String,
    government_area: Schema.Types.String,
    market: { type: Schema.Types.String, required: true },
    country: { type: Schema.Types.String, required: true },
    country_code: { type: Schema.Types.String, required: true },
    location: {
      type: { type: Schema.Types.String, default: 'Point' },
      coordinates: { type: [Schema.Types.Number], required: true },
      is_location_exact: { type: Schema.Types.Boolean, required: true },
    },
  },
  availability: {
    availability_30: { type: Schema.Types.Number, required: true },
    availability_60: { type: Schema.Types.Number, required: true },
    availability_90: { type: Schema.Types.Number, required: true },
    availability_365: { type: Schema.Types.Number, required: true },
  },
  review_scores: {
    review_scores_accuracy: { type: Schema.Types.Number, required: true },
    review_scores_cleanliness: { type: Schema.Types.Number, required: true },
    review_scores_checkin: { type: Schema.Types.Number, required: true },
    review_scores_communication: { type: Schema.Types.Number, required: true },
    review_scores_location: { type: Schema.Types.Number, required: true },
    review_scores_value: { type: Schema.Types.Number, required: true },
    review_scores_rating: { type: Schema.Types.Number, required: true },
  },
  reviews: [
    {
      _id: Schema.Types.String,
      date: { type: Schema.Types.Date, required: true },
      listing_id: { type: Schema.Types.String, required: true },
      reviewer_id: { type: Schema.Types.String, required: true },
      reviewer_name: { type: Schema.Types.String, required: true },
      comments: { type: Schema.Types.String, required: true },
    },
  ],
});

export const listingContext = model<Listing>('Listing', listingSchema, "listingsAndReviews");
